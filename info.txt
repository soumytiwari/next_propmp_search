--> npx create-next-app@latest ./
//  "./" to create the files in this particular directory

--> npm install bcrypt mongodb mongoose next-auth
//  bccrypt to hash password
//  mongodb for database
//  mongoose to help manage the database


- components folder: Here we'll keep our re-usable components
- models: for mongodb mongoose database models
- utils: for utility functions we are going to use throughout our applications
- .env: to store secure keys

>> recreated folders: public, app


-----------------------------------------------

after creation:

- ./app/page.jsx: will render our home page
--> edits
--> npm run dev: to start the server on localhost: 3000



-------------------------------------------------------------


now we're ready to start developing the project

- feed.jsx: here we are gonna show all the prompts generated
- ./app/api/auth/[...nextauth]/route.js: relative route([...xyz]), with variable parameter nextauth, used in route.js

:: every nextjs route is serverless route ==> no server is needed to access database, but connection is needed to the database
lambda function -> opens the connection to the database
- serverless -> Lambda -> dynamodb
- mongoose: helping us interact with mongodb database

-----------------------------
online cloud storage to create your storage
- mongodb.com/atlas: create-cluster, go to access, password, go to network access-> add ip address(current)
but there's an option of "0000" for ip-address => can access the database from anywhere in the world

- /models/user.js: the model on which user data will be stored
- route: is gonna handle entire authentication process (adding the api route)

|reate: 
|NEXTAUTH_URL=http://localhost:3000
|NEXTAUTH_URL_INTERNAL=http://localhost:3000
|NEXTAUTH_SECRET= A random string is used to hash tokens, sign/encrypt cookies and generate cryptographic keys.
- use the command, openssl rand -base64 32 for windows and nextauth secret will be generated. You can go to, https://www.cryptool.org/en/cto/openssl.html here for using ssl-terminal

---------

- to know what you have in a specific const or variable etc., you can use "alert" ex: {alert.(session?.user)} <or console log, if you wanna open up console and see>
- to make google-sigin work, you need to add "api/auth/callback/google" uri appended with, "http://localhost:3000/" as new OAuth2.0 redirect uri
- whenever you import a hook, you need to make it 'use client'; thing
- (create our own api end point): /api/prompt/new/route.js <create in..>. Now create your own route there...
- connectToDB is a Lambda function: which means, when we avoke it, it connects to the db, do its job and then go in peace (it is going to die, oncw it does its job)
- get request to get all of the prompts to show in our feed
- we've created our prompt.. now we need to display it/them as feed
- now all the CRUD operation will come to live, as we implement our GET request
- with POST, we created (status: 201) our prompt. With GET we're showing (status: 200) our prompt/s in feed 
- status: 500: internal server error, error during connecting the website's server (here, temp-db connection).. and that the requested page cannot be accessed.
- CRUD: Create(POST) Read/Retrieve(GET) Update(POST) Delete(DELETE)
- [id]: dynamic route of id

---------------

Let's go to, not the profile page, but the profile component, to show user profile data the them
- handleDelete={() => handleDelete && handleDelete(post)}
- handleDelete &&: if the 'handleDelete' exists.. 
- handleDelete(post): do the work in handleDelete, with the passed param (here, post)